/*
 * Copyright 2012-2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.ognice;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.WebApplicationType;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Random;

@SpringBootApplication
@Configuration
public class SampleSimpleApplication {

    public static void main(String[] args) {
        SpringApplication application = new SpringApplication(SampleSimpleApplication.class);
        application.setWebApplicationType(WebApplicationType.SERVLET);

        application.run(args);
        RestTemplate restTemplate = new RestTemplate();

        String account = "2271833013130698,561709434235300,2318055921606972,2458970424190393,475087766636661,1482148525260527,649020712265215,565149914020208,2189702324654196,321591438555963,580953442432420,878160795885797,504305426780836,522012718342503,1091689291029975,2898151900198372,419068712150209,2489622414411028,1583670235103328,376338709751920,2910210048994733,2091942467779710,2706581709372753,401885387105535,700276203780926,441301546711312,476765956489618,2460489014179881,436880063574962,369120650674846,1582658935201202,418968408745182,2643096382390506,1206325586157738,2214883808623001,731204810642989,418893595645089,418479052209076,1501782083292871,225783735002484,501579860646201,2344275772274492,424897824899364,757498211331189,325490424817150,418930692301448,348975342692820,659915771155677,551526232260015,827923304268690,460929861419448,480075242541744,850198965366898,488326431739247,1082121778844182,425709554706352,2354204264628211,417360592233443,2934088646816737,355056652105506,729056707546867,2437576669696741,2440582706030423,748806218897294,732173023907237,927116914303944,370847486938321,2105309006246228,916091678737627,2553537874931678,2437498019865439,501929660351448,678291765980596,910133772686937,363639731193402,2291547904227213,2403877496552054,666780773832103,1459710160838952,676349416166313,904139613276180,419305002025044,2311053445682679,488174405368973,309601723177404,676563816153534,415069352423050,2688054791229196,887516831618941,744884662606842,905742016459468,657342444762516,487223162073727,1320293601479325,438960986689396,666444840431742,929304810757306,3481833461842387,967072183636042,435901493688926,2404401993182245,409502506352055,884787458546101,364133634255102,2739172772819398,2171381852988289,681960702259193,2100063746954123,1344728392343514,739504839812869,689855041442581,1850383161771972,2364113427210332,2286003018192958,2391388651187492,331656557735832,2143479269096969,872521346434374,748275612272114,1156290631235325,2394565344088223,1130252427170233,463176477770184,788616721540633,298966220940098,325302751715115,402007007114097,385103145421428,452897008897354,2523124067744580,755902368176095,907621836259651,1623122597818287,2395515204040422,1639272149537053,630701387333508,457592025095737,2183816361745355,662525644263624,610498129478982,411878542767997,2230295813764827,886571755036662,459584991562958,3125334474174030,370570363833486,2376297289106389,2422177311397558,386513758731467,2400697266687741,493310587911463,3029777503731466,834778520229414,2777053169211793,363944504276431,639184809824530,381011685944596,508480633234124,524345974974321,402700683711719,491119405041248,348091269433264,953233938347168,397594644287353,2265000447144672,539315853519703,2471863306384849,2446370485582739,1823420027760335,485742935561782,498112027401085,976946612668963,796719294058478,727028434404397,505630896878244,463485924207791,387542421950155,469231530320676,2431954733531565,419278858565162,2445858882174034,932413170430895,1116282855223598,545970052877046,365739857660690,467561044099464,508495806625509,381043076149048,375696103115544,529438361197922,684153835385034,667027467124277,942517456092996,475238303032978,378906499491593,387241378643925,2086465758321691,452184828960616,355775815041568,1339012562932599,735020736959711,2468198606799627,2407712636154456";
        Arrays.stream(account.split(",")).forEach(accountID -> {
            String url = "https://api.algobuy.net/ad/init?accountId="+accountID;
            System.out.println(url);
            HttpHeaders requestHeaders = new HttpHeaders();
            requestHeaders.add("Content-Type", "application/json");
            requestHeaders.add("Authorization", "bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsiYXBpIl0sInVzZXJfaWQiOiIzNjQ4NjQ0MjAyMjIwNzg5NzYiLCJ1c2VyX25hbWUiOiLpu4Tlh6_npo8iLCJvcmdfaWQiOiIxYmUwZmM3NjFhN2Y0YWUxOGE2ODQ0MDZiMTE3MWRiYiIsInNjb3BlIjpbInNlbGVjdCIsIiB1cGRhdGUiLCIgZGVsZXRlIl0sImV4cCI6MTU2NzYzNzI3NSwiYXV0aG9yaXRpZXMiOlsiUk9MRV_kvIHkuJrnrqHnkIblkZgiXSwianRpIjoiYjk4YjJhMzItZTVkZS00OWExLWEzYTAtMTllODEzNmVhYjhjIiwiY2xpZW50X2lkIjoiZnJvbnQiLCJyb2xlX3Njb3BlIjoxfQ.MHpPeKTGAtCvYDSxYRk11pvXvgcqESP3m2qp6dgacSE");
            HttpEntity<String> requestEntity = new HttpEntity<String>(null, requestHeaders);
            ResponseEntity<String> response = restTemplate.exchange(url , HttpMethod.GET, requestEntity, String.class, new HashMap<>());
            String sttr = response.getBody();
            System.out.println(sttr);
            try {
                Thread.sleep( new Random().nextInt(10)*1000*60);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });

    }
}
